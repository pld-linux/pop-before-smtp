--- pop-before-smtp-1.18/pop-before-smtp.wiget	Mon Sep 18 01:55:52 2000
+++ pop-before-smtp-1.18/pop-before-smtp	Mon Sep 18 14:44:06 2000
@@ -206,70 +206,91 @@
 # File to watch for pop3d/imapd records
 my $logfile = '/var/log/maillog';
 
+# Default pattern name
+my $pattern_name = "uw";
+my $pattern_name2 = "gnupop3d";
+
 # If postconf isn't somewhere on this PATH, do fix the PATH so it is
 $ENV{'PATH'} = '/usr/sbin:/usr/bin:/sbin:/bin:/usr/local/sbin:/usr/local/bin';
 
 # This regex pull the lines I'm interested in out of $logfile, and yanks out
 # the timestamp and IP address
 
+my %patterns = (
 # For UW ipop3d/imapd, pattern tweaked by Stig Hackvan <stig@hackvan.com>
-my $pat = '^(... .. ..:..:..) \S+ (?:ipop3d|imapd)\[\d+\]: ' .
-          '(?:Login|Authenticated|Auth) user=\S+ host=(?:\S+ )?\[(\d+\.\d+\.\d+\.\d+)\](?: nmsgs=\d+/\d+)?$';
+	uw => '^(... .. ..:..:..) \S+ (?:ipop3d|imapd)\[\d+\]: ' .
+          '(?:Login|Authenticated|Auth) user=\S+ host=(?:\S+ )?\[(\d+\.\d+\.\d+\.\d+)\](?: nmsgs=\d+/\d+)?$',
 
 # Bennett Todd to add support for GNU pop3d
-my $pat2 = '^(... .. ..:..:..) \S+ gnu-pop3d\[\d+\]: ' .
-	  'User .* logged in with mailbox .* from (\d+\.\d+\.\d+\.\d+)$';
+	gnupop3d => '^(... .. ..:..:..) \S+ gnu-pop3d\[\d+\]: ' .
+	  'User .* logged in with mailbox .* from (\d+\.\d+\.\d+\.\d+)$',
 
 # There are many, many different logfile formats emitted by various
 # qpoppers. Here's an attempt to match any of them, but for all
 # I know it might also match failed logins, or something else.
-# my $pat = '^(... .. ..:..:..) \S+ q?popper\S+\[\d+\]: .*\s(\d+.\d+.\d+.\d+)$'
+	qpopper_all => '^(... .. ..:..:..) \S+ q?popper\S+\[\d+\]: .*\s(\d+.\d+.\d+.\d+)$',
 
 # For Cyrus, Kenn Martin <kmartin@infoteam.com>, with tweak
 # from William Yodlowsky for IP addrs that don't resolve:
-# my $pat = '^(... .. ..:..:..) \S+ (?:pop3d|imapd)\[\d+\]: ' .
-#           'login: \S*\[(\d+\.\d+\.\d+\.\d+)\] \S+ \S+';
+	cyrus => '^(... .. ..:..:..) \S+ (?:pop3d|imapd)\[\d+\]: ' .
+           'login: \S*\[(\d+\.\d+\.\d+\.\d+)\] \S+ \S+',
 
 # For Courier-IMAP:
-#my $pat = '^(... .. ..:..:..) \S+ imaplogin: ' .
-#          'LOGIN, user=\S+, ip=\[(\d+\.\d+\.\d+\.\d+)\]$';
+	courier => '^(... .. ..:..:..) \S+ imaplogin: ' .
+          'LOGIN, user=\S+, ip=\[(\d+\.\d+\.\d+\.\d+)\]$',
 
 # For qmail's pop3d:
-#my $pat = '^(... .. ..:..:..) \S+ vpopmail\[\d+\]: ' .
-#          'vchkpw: login \[\S+\] from (\d+\.\d+\.\d+\.\d+)$';
+	qmail => '^(... .. ..:..:..) \S+ vpopmail\[\d+\]: ' .
+          'vchkpw: login \[\S+\] from (\d+\.\d+\.\d+\.\d+)$',
 
 # For Qpopper POP/APOP Server
-# my $pat = '^(... .. ..:..:..) \S+ (?:qpopper)\[\d+\]: Stats: \S+ ' .
-#           '(?:\d+ ){4}(\d+.\d+.\d+.\d+)';
+	qpopper => '^(... .. ..:..:..) \S+ (?:qpopper)\[\d+\]: Stats: \S+ ' .
+           '(?:\d+ ){4}(\d+.\d+.\d+.\d+)',
 
 # Alex Burke's popper install
-# my $pat = '^(... .. ..:..:..) \S+ popper\[\d+\]: Stats: \S+ ' .
-#           '(?:\d+ ){4}(?:\S+ )?(\d+.\d+.\d+.\d+)$';
+	brukes_popper => '^(... .. ..:..:..) \S+ popper\[\d+\]: Stats: \S+ ' .
+           '(?:\d+ ){4}(?:\S+ )?(\d+.\d+.\d+.\d+)$',
 
 # Chris D.Halverson's pattern for Qpopper 3.0b29 on Solaris 2.6
-# my $pat = '^(\w{3} \w{3} \d{2} \d{2}:\d{2}:\d{2} \d{4}) \[\d+\] ' .
-#           ' Stats:\s+\w+ \d \d \d \d [\w\.]+ (\d+\.\d+\.\d+\.\d+)';
+	halverson_qpopper => '^(\w{3} \w{3} \d{2} \d{2}:\d{2}:\d{2} \d{4}) \[\d+\] ' .
+           ' Stats:\s+\w+ \d \d \d \d [\w\.]+ (\d+\.\d+\.\d+\.\d+)',
 
 # Nick Bauer <nickb@inc.net> has something completely different as
 # a qpopper logfile format
-# my $pat = '^(... .. ..:..:..) \S+ qpopper\S+\[\d+\]: \([^)]*\) POP login ' .
-#           'by user "[^"]+" at \([^)]+\) (\d+.\d+.\d+.\d+)$'
+	nickb_qpopper => '^(... .. ..:..:..) \S+ qpopper\S+\[\d+\]: \([^)]*\) POP login ' .
+           'by user "[^"]+" at \([^)]+\) (\d+.\d+.\d+.\d+)$',
 
 # For cucipop, matching a sample from Daniel Roesen:
-# my $pat = '^(... .. ..:..:..) \S+ cucipop\[\d+\]: \S+ ' .
-#           '(\d+\.\d+\.\d+\.\d+) \d+, \d+ \(\d+\), \d+ \(\d+\)';
+	cucipop => '^(... .. ..:..:..) \S+ cucipop\[\d+\]: \S+ ' .
+           '(\d+\.\d+\.\d+\.\d+) \d+, \d+ \(\d+\), \d+ \(\d+\)',
+		   
+# For Solid POP3d by Artur Frysiak <wiget@pld.org.pl>:
+	spop3d => '^(... .. ..:..:..) \S+ spop3d\[\d+\]: ' .
+		'user \S+ authenticated - (\d+\.\d+\.\d+\.\d+)',
+);
 
 my $dbfile = '/etc/postfix/pop-before-smtp'; # DB hash to write
 my $grace = 1800; # 30 minutes --- grace period
 
+my $pattern_msg;
+my $pat;
+my $pat2;
+
 GetOptions(
 	"write!" => \$write,
 	"flock!" => \$flock,
 	"debug!" => \$debug,
 	"dbfile=s" => \$dbfile,
 	"grace=i" => \$grace,
+	"logfile=s" => \$logfile,
+	"pattern-name=s" => \$pattern_name,
+	"second-pattern-name=s" => \$pattern_name2,
 ) or die "syntax: $0 [--[no]write] [--[no]debug] [--logfile=filename] " .
-	"[--dbfile=filename] [--grace=seconds]\n";
+	"[--dbfile=filename] [--grace=seconds] " .
+	"[--logfile=filename] [--pattern-name=name] [--second-pattern-name=name]\n" .
+	"Supported patterns: " .
+	join(',', keys(%patterns)) .
+	"\n";
 
 $flock = 0 unless $write; # flocking makes no sense if you're not writing
 
@@ -320,6 +341,19 @@
 	}
 	return @r;
 }
+
+if ( exists ($patterns{$pattern_name}) ) {
+	$pat = $patterns{$pattern_name};
+} else {
+	die "pattern $pattern_name not supported.\n";
+}
+
+if ( exists ($patterns{$pattern_name2}) ) {
+	$pat2 = $patterns{$pattern_name2};
+} else {
+	die "pattern $pattern_name2 not supported.\n";
+}
+
 my @mynets = cleanup_nets(`postconf mynetworks`);
 while (my @tmp = grep { $mynets[$_] =~ m#^/# } 0..$#mynets) {
 	for (reverse @tmp) {
